# -*- coding: utf-8 -*-
"""
Created on Mon May 25 01:13:36 2020

@author: ioamp
"""



# 0-1 Knapsack Problem 
def knapSack(W, wt, val, n): 

	# Base Case 
	if n == 0 or W == 0 : 
		return 0

# Εάν το βάρος του ν-οστού αντικειμένου είναι πάνω απο την χωριτηκότητα 
# του σάκου, τότε το αντικείμενο δεν μπορεί να συμπεριληφθεί στη λύση.
# έτσι ξανακαλούμε την συνάρτηση, με ένα λιγότερο αντικείμενο
	if (wt[n-1] > W): 
		return knapSack(W, wt, val, n-1) 

	
	# Επιστρέφει το max δύο περιπτώσεων, του ν-οστού αντικειμένου που περιλαμβάνεται και
    #που δεν περιλαμβάνεται
    # Αν περιλαμβάνεται πρέπει να προσθέσουμε τη τιμή του τελευταίου συν τη λύση για ενα ακόμα αντικείμενο, και μειώνουμε την χωρητικότητα του σάκου 
	# Αν το τελευταίο αντικείμενο έχει αποκλειστεί, λύνουμε για ένα λιγότερο αντικείμενο 
	else:  
		return max( 
			val[n-1] + knapSack( 
				W-wt[n-1], wt, val, n-1), 
				knapSack(W, wt, val, n-1))

# Τέλος συνάρτησης

# Εισαγωγή δεδομένων για έλεγχο 
val = [1,2,2,4,10] 
wt = [1,1,2,12,4] 
W = 15
n = len(val) 

print ("Η καλύτερη λύση-αξία είναι:",knapSack(W, wt, val, n) )


